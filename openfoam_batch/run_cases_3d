#!/bin/bash

# Set up some stuff for getopts
OPTIND=1

# Default values
stl_dir="stl/"
base_dir="base_case3d_new/"
csv_dir="csv3d/"
wind_delta=20
home_dir=$(pwd)
end_iter=-1
write_iter=-1
regrid=1
build_mesh=1
output_dir="cases3d/"

# Source shared functions ( 'create_base_case' and 'check_files' )
source shared_functions.sh

usage() { 
    echo -e "Usage: $0 [OPTION] stl_dir1 stl_dir2 ..."
    # echo -e "  -s stl_dir\n\tDirectory of stl files"
    echo -e "  -c csv_dir\n\tDirectory to output csv files"
    echo -e "  -b base_dir\n\tlocation of base case directory"
    echo -e "  -o output_dir\n\tOutput directory"
    echo -e "  -w delta_wind\n\tWind step size \(w=1:delta_wind:15\)"
    echo -e "  -e end_time"
    echo -e "\tendTime for simpleFoam (default to existing value from controlDict)"
    echo -e "  -i write_interval"
    echo -e "\twriteInterval for simpleFoam (default to existing value from controlDict)"
    echo -e "  -g [0/1]"
    echo -e "\tgenerate regridded output (default 1)"
    echo -e "  -s [0/1]"
    echo -e "\trerun snappyHexMesh to generate new mesh (default 1)"
    echo -e "  -2 casename\n\tHigher-order solver case"
    echo -e "  -h"
    echo -e "\tprint this help and exit"
}

while getopts "c:b:w:e:i:s:2:o:g:h" opt; do
    case "$opt" in
        # s)  stl_dir=$OPTARG ;;
        c)  csv_dir=$OPTARG ;;
        b)  base_dir=$OPTARG ;;
        w)  wind_delta=$OPTARG ;;
        e)  end_iter=$OPTARG ;;
        i)  write_iter=$OPTARG ;;
        s)  build_mesh=$OPTARG ;;
        2)  second_solver=$OPTARG ;;
        o)  output_dir=$OPTARG ;;
        g)  regrid=$OPTARG ;;
        h)  usage
            exit 0
            ;;
        *)  usage >&2
            exit 1
            ;;
    esac
done
shift $(expr $OPTIND - 1 )

if [ "$#" -lt 1 ]; then
    echo "ERROR: No stl directories supplied" >&2
    usage >&2
    exit 1
fi

output_dir=$( check_path "$output_dir" "$home_dir" ) || exit 1
csv_dir=$( check_path "$csv_dir" "$home_dir" ) || exit 1
base_dir=$( check_path "$base_dir" "$home_dir" ) || exit 1

# Check openFOAM version
if ! type simpleFoam &> /dev/null 
then
    echo "ERROR: command simpleFoam not found, have you sourced OpenFOAM bashrc?" >&2
    exit 1
fi
openfoam_build=$(simpleFoam -help | sed -n -e '/Build:\s/{s/.*://p}')
openfoam_major_version=$(echo $openfoam_build | head -c 1) 
echo "OpenFOAM version $openfoam_major_version found, build $openfoam_build"
case "$openfoam_major_version" in
    4) stl_geometry='geometry\n{\n\t$:TERRAIN_DICT.STL_FILE\n\t{\n\t\ttype triSurfaceMesh;\n\t\tname hill_geometry;\n\t}\n};'
        ;;
    5) stl_geometry='geometry\n{\n\thill_geometry\n\t{\n\t\ttype triSurfaceMesh;\n\t\tfile $:TERRAIN_DICT.STL_FILE;\n\t}\n};'
        ;;
    *)
        echo "ERROR: OpenFOAM major version not supported/recognized." >&2
        exit 1
        ;;
esac
snappy_dict="snappyHexMeshDict"

# The remaining arguments are the stl directories
# base_case=$home_dir/$base_dir
base_case="$base_dir"
python_directory=$home_dir/python
# mkdir -p $csv_dir


# Loop over case_directories, create new directory for each case
for stl_dir in "$@"; do
    stl_dir=$( check_path "$stl_dir" "$home_dir" ) || continue
    casename=$(basename -- "$stl_dir")
    stl_file="${stl_dir}/${casename}.stl"
    terrainDict_file="${stl_dir}/terrainDict"
    ylim_file="${stl_dir}/YLIMS"
    
    check_files $stl_file $terrainDict_file $ylim_file
    if [ $? -gt 0 ]; then
        echo "Case file not found, skipping case $casename"
        continue
    fi
    
    echo "Creating new case ${casename} based on ${stl_dir}"
    case_dir=${output_dir}/${casename}
    # case_dir=${home_dir}/cases3d/${casename}
    mkdir -p $case_dir

    simpleFoam_dir="${case_dir}/simpleFoam"
    reGrid_dir="${case_dir}/reGrid"
    stl_case_file="${case_dir}/${casename}.stl"

    ln -s $stl_file $stl_case_file
    ln -s $terrainDict_file ${case_dir}/terrainDict
    
    # Get y_limits as an array to access elements ${y_limits[i]}
    y_limits=( $( < $ylim_file ) )    

    # Create simpleFoam directory for running simpleFoam
    create_base_case $simpleFoam_dir $base_case/base
    ln -s ${case_dir}/terrainDict $simpleFoam_dir/system/terrainDict

    mkdir -p $simpleFoam_dir/constant/triSurface
    ln -s $stl_case_file $simpleFoam_dir/constant/triSurface/${casename}.stl
    ln -s $base_case/simpleFoam/system/blockMeshDict \
        $simpleFoam_dir/system/blockMeshDict
    sed -e "s+STLGEOMETRY+$stl_geometry+g" $base_case/simpleFoam/system/${snappy_dict} \
        > $simpleFoam_dir/system/snappyHexMeshDict
    # ln -s $base_case/simpleFoam/system/${snappy_dict} \
    #     $simpleFoam_dir/system/snappyHexMeshDict

    # Create reGrid directory for output resampling onto regular grid
    create_base_case $reGrid_dir $base_case/base
    ln -s $base_case/reGrid/system/blockMeshDict \
        $reGrid_dir/system/blockMeshDict
    ln -s ${case_dir}/terrainDict $reGrid_dir/system/terrainDict
    ln -s $base_case/reGrid/Allclean $reGrid_dir/Allclean
   

    if [ $build_mesh -gt 0 ]
    then
        # Build mesh
        echo -ne "\tBuilding mesh..."
        cd $simpleFoam_dir

        blockMesh > blockMesh.log 2> blockMesh.err
        if [ $? -ne 0 ]
        then
            echo " blockMesh failed. Skipping ${casename}. Error report:"
            cat blockMesh.err
            continue
        fi

        snappyHexMesh -overwrite > snappyHexMesh.log 2> snappyHexMesh.err
        if [ $? -ne 0 ]
        then
            echo " snappyHexMesh failed. Skipping ${casename}. Error report:"
            cat snappyHexMesh.err
            continue
        else
            echo " done. Final mesh properties:"
            cat snappyHexMesh.log | tail -14
        fi
        rm -rf ${simpleFoam_dir}/dynamicCode/

        echo -en "\tBuilding resampled (regular) mesh for final output..."
        cd $reGrid_dir
        ./Allclean
        blockMesh > blockMesh.log 2> blockMesh.err

        if [ $? -ne 0 ]
        then
            echo " failed. Error report:"
            cat blockMesh.err
            echo -e "\tMoving to next case."
            continue
        fi
        echo " done."
        touch testgrid.foam
    fi

    cd $case_dir

    # Read atmospheric variables to calculate k, eps
    abl_file="${base_case}/simpleFoam/0.orig/include/ABLConditions"
    abl_kappa=$( sed -n 's/^ *kappa *\([\.,0-9]*\).*/\1/p' $abl_file )
    abl_Cmu=$( sed -n 's/^ *Cmu *\([\.,0-9]*\).*/\1/p' $abl_file )
    abl_Zref=$( sed -n 's/^ *Zref *\([\.,0-9]*\).*/\1/p' $abl_file )
    abl_z0=$( sed -n 's/^ *z0[^0-9]*\([\.,0-9]*\).*/\1/p' $abl_file )
    abl_zGround=$( sed -n 's/^ *zGround[^0-9]*\([\.,0-9]*\).*/\1/p' $abl_file )
    abl_params="-z 5.0 --Z-ref $abl_Zref -z0 $abl_z0 -zg $abl_zGround "
    if [ -n "$abl_kappa" ]; then
        abl_params="$abl_params -k $abl_kappa"
    fi
    if [ -n "$abl_Cmu" ]; then
        abl_params="$abl_params -C $abl_Cmu"
    fi
    echo "ABL_PARAMS: $abl_params"

    # Loop over wind speeds
    #for (( w=1; w<=15; w+=$wind_delta )); do
    w=1

    # Calculate k, epsilon
    k_epsilon=($(python $python_directory/abl_k_epsilon.py -U $w $abl_params))
    k_abl="${k_epsilon[0]}"
    eps_abl="${k_epsilon[1]}"
    echo "K_EPSILON: $k_abl $eps_abl"

    wind_directory="${case_dir}/W${w}"
    # Create system folder, symlinks from base case
    create_base_case $wind_directory $base_case/base
    ln -s ${simpleFoam_dir}/constant/polyMesh $wind_directory/constant/polyMesh

    cd $wind_directory
    if [ $end_iter -gt 0 ]; then
        sed -i -e "s/endTime\s\{1,\}[0-9]*/endTime\t${end_iter}/g" system/controlDict
    fi
    if [ $write_iter -gt 0 ]; then
        sed -i -e "s/writeInterval\s\{1,\}[0-9]*/writeInterval\t${write_iter}/g" system/controlDict
    fi

    # Copy initial conditions, change wind speed
    cp -r $base_case/simpleFoam/0.orig $wind_directory/0
    sed -i "s/WINDSPEED/$w/" 0/include/ABLConditions
    sed -i "s/INLETK/${k_abl}/" 0/k
    sed -i "s/INLETEPSILON/${eps_abl}/" 0/epsilon
    echo -en "\tCase setup complete: W=$w, running simpleFoam..."
    simpleFoam > simpleFoam.log 2> simpleFoam.err
    if [ "$?" -gt 0 ]; then
        echo " failed!"
        continue
    fi
    first_converged=$( foamListTimes -latestTime ) # ls -d */ | sed 's:\([0-9]\+\).*:\1:g' | sort -n | tail -1)
    echo " converged in ${first_converged} iterations."

    if [ -n "$second_solver" ]; then
        # We also have a higher-order case
        # We will remove the first order solution if the second is successful
        echo -en "\tRunning second solver simpleFoam..."
        create_base_case $wind_directory $base_case/$second_solver -fn
        simpleFoam > simpleFoam2.log 2> simpleFoam2.err
        if [ "$?" -gt 0 ]; then
            echo " failed!"
	    continue
        else
            second_converged=$(  foamListTimes -latestTime ) # ls -d */ | sed 's:\([0-9]\+\).*:\1:g' | sort -n | tail -1)
            echo " converged in ${second_converged} iterations."
            rm -r "${wind_directory}/${first_converged}"
        fi
    fi
    
    cd $wind_directory
    touch hill.foam

    if [ "$regrid" -gt 0 ]
    then
        latest_time=$( foamListTimes -latestTime )
        echo -en "\tResampling results onto test grid..."
        printf -v csv_file "$csv_dir/%s_W%02d" $casename $w
        python "${python_directory}/resample.py" --three-d --case-dir $wind_directory \
            --mesh-dir $reGrid_dir --case-foam hill.foam --outfile $csv_file --time $latest_time
        if [ "$?" -gt 0 ]; then
            echo " failed!"
        else
            echo " done."
        fi
    fi
    
    cd $home_dir
    w=$( echo "$w+$wind_delta" | bc )
    for (( w=$w; w<=15; w+=$wind_delta )); do
        ./reuse_wind_case -c "${case_dir}/W1" -v 1 -o "$case_dir" $w
        if [ "$?" -eq 0 ] && [ "$regrid" -gt 0 ]
        then
            wind_directory="${case_dir}/W${w}"
            cd $wind_directory
            touch hill.foam
            latest_time=$( foamListTimes -latestTime )
            printf -v csv_file "$csv_dir/%s_W%02d" $casename $w
            echo -en "\tCreating csv for t=$latest_time to $csv_file..."
            python "${python_directory}/resample.py" --three-d --case-dir $wind_directory \
                --mesh-dir $reGrid_dir --case-foam hill.foam --outfile $csv_file --time $latest_time
            if [ "$?" -gt 0 ]; then
                echo " failed!"
            else
                echo " done."
            fi
        fi
        cd $home_dir
    done
done

