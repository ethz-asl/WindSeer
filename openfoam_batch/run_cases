#!/bin/bash

# Set up some stuff for getopts
OPTIND=1

# Default values
base_dir="base_case/"
csv_dir="csv/"
n_slices=2
wind_delta=20
home_dir=$(pwd)
end_iter=-1
write_iter=-1

# Source shared functions ( 'create_base_case' and 'check_files' )
source shared_functions.sh

usage() { 
    echo -e "Usage: $0 [OPTION] stl_dir0 stl_dir1 ..."
    echo -e "  -c csv_dir\n\tDirectory to output csv files"
    echo -e "  -b base_dir\n\tlocation of base case directory"
    echo -e "  -n n_slices\n\tNumber of terrain slices per stl file"
    echo -e "  -w delta_wind\n\tWind step size \(w=1:delta_wind:15\)"
    echo -e "  -e end_time"
    echo -e "\tendTime for simpleFoam (default to existing value from controlDict)"
    echo -e "  -i write_interval"
    echo -e "\twriteInterval for simpleFoam (default to existing value from controlDict)"
    echo -e "  -h"
    echo -e "\tprint this help and exit"
}

while getopts "c:b:n:w:e:i:h" opt; do
    case "$opt" in
        c)  csv_dir=$OPTARG
            ;;
        b)  base_dir=$OPTARG
            ;;
        n)  n_slices=$OPTARG
            ;;
        w)  wind_delta=$OPTARG
            ;;
        e)  end_iter=$OPTARG
            ;;
        i)  write_iter=$OPTARG
            ;;
        h)
            usage
            exit 0
            ;;
        *)
            usage >&2
            exit 1
            ;;
    esac
done
shift $(expr $OPTIND - 1 )

if [ "$#" -lt 1 ]; then
    echo "ERROR: No stl directories supplied" >&2
    usage >&2
    exit 1
fi

# Check openFOAM version
if ! type simpleFoam &> /dev/null 
then
    echo "ERROR: command simpleFoam not found, have you sourced OpenFOAM bashrc?" >&2
    exit 1
fi
openfoam_build=$(simpleFoam -help | sed -n -e '/Build:\s/{s/.*://p}')
openfoam_major_version=$(echo $openfoam_build | head -c 1) 
echo "OpenFOAM version $openfoam_major_version found, build $openfoam_build"
case "$openfoam_major_version" in
    5) snappy_dict="snappyHexMeshDict"
        ;;
    4) snappy_dict="snappyHexMeshDict_v4"
        ;;
    *)
        echo "ERROR: OpenFOAM major version not supported/recognized." >&2
        exit 1
        ;;
esac

# The remaining arguments are the stl directories
base_case=$home_dir/$base_dir
python_directory=$home_dir/python
mkdir -p $csv_dir

# Loop over case_directories, create new directory for each case
for stl_dir in "$@"; do
    casename=$(basename -- "$stl_dir")
    stl_file=${home_dir}/${stl_dir}/${casename}.stl
    terrainDict_file=${home_dir}/${stl_dir}/terrainDict
    ylim_file=${home_dir}/${stl_dir}/YLIMS
    
    check_files $stl_file $terrainDict_file $ylim_file
    if [ $? -gt 0 ]; then
        echo "Case file not found, skipping case $casename"
        continue
    fi
    
    echo "Creating new case ${casename} based on ${stl_dir}"
    case_dir=${home_dir}/cases/${casename}
    mkdir -p $case_dir

    simpleFoam_dir="${case_dir}/simpleFoam"
    snappyHex_dir="${case_dir}/snappyHexMesh"
    reGrid_dir="${case_dir}/reGrid"
    stl_case_file="${case_dir}/${casename}.stl"

    ln -s $stl_file $stl_case_file
    ln -s $terrainDict_file ${case_dir}/terrainDict
    
    # Get y_limits as an array to access elements ${y_limits[i]}
    y_limits=( $( < $ylim_file ) )    
    
    touch ${case_dir}/sliceDict
    
    # Create simpleFoam directory for running simpleFoam
    create_base_case $simpleFoam_dir $base_case/base
    ln -s $base_case/simpleFoam/system/extrudeMeshDict \
        $simpleFoam_dir/system/extrudeMeshDict
    ln -s ${case_dir}/terrainDict $simpleFoam_dir/system/terrainDict
    ln -s ${case_dir}/sliceDict $simpleFoam_dir/system/sliceDict

    # Create snappy directory for generating mesh
    create_base_case $snappyHex_dir $base_case/base
    mkdir -p $snappyHex_dir/constant/triSurface
    ln -s $stl_case_file $snappyHex_dir/constant/triSurface/${casename}.stl
    ln -s $base_case/snappyHexMesh/system/blockMeshDict \
        $snappyHex_dir/system/blockMeshDict
    ln -s $base_case/snappyHexMesh/system/${snappy_dict} \
        $snappyHex_dir/system/snappyHexMeshDict
    ln -s ${case_dir}/terrainDict $snappyHex_dir/system/terrainDict
    ln -s ${case_dir}/sliceDict $snappyHex_dir/system/sliceDict

    # Create reGrid directory for output resampling onto regular grid
    create_base_case $reGrid_dir $base_case/base
    ln -s $base_case/reGrid/system/blockMeshDict \
        $reGrid_dir/system/blockMeshDict
    ln -s ${case_dir}/terrainDict $reGrid_dir/system/terrainDict
    ln -s ${case_dir}/sliceDict $reGrid_dir/system/sliceDict
    ln -s $base_case/reGrid/Allclean $reGrid_dir/Allclean
   
    # ------ SLICING ------#
    # Now we have created all the base runs, start slicing
    y_step=$(echo "scale=2; (${y_limits[1]} - ${y_limits[0]}) / $n_slices" | bc)
    current_y=${y_limits[0]}

    cd ${case_dir}
    echo " ${case_dir}, n_slices=${n_slices}, y_step=${y_step}, wind_delta=${wind_delta}"

    # Loop over current_y positions
    for (( yi=0; yi<$n_slices; yi++ )); do
        echo -n "  Slice $(($yi+1))/$n_slices: Y=$current_y, building mesh..."
        sed "s/YSLICE/${current_y}/" $home_dir/sliceDict.in > $case_dir/sliceDict

        cd $snappyHex_dir
        blockMesh > blockMesh.log 2> blockMesh.err
        snappyHexMesh -overwrite > snappyHexMesh.log 

        cd $simpleFoam_dir
        extrudeMesh > extrudeMesh.log 

        y_slice_dir="${case_dir}/YS${current_y}"

        mkdir $y_slice_dir
        cd $y_slice_dir
        cp -r $simpleFoam_dir/constant/polyMesh $y_slice_dir
        echo " done."
        
        echo -ne "\tBuilding resampled (regular) mesh for final output..."
        cd $reGrid_dir
        ./Allclean
        blockMesh > blockMesh.log 2> blockMesh.err
        touch testgrid.foam
        echo " done."

        # Loop over wind speeds
        for (( w=1; w<=15; w+=$wind_delta )); do

            # Calculate k, epsilon
            k_epsilon=($(python $python_directory/abl_k_epsilon.py -U $w))

            wind_directory="${y_slice_dir}/W${w}"
            # Create system folder, symlinks from base case
            create_base_case $wind_directory $base_case/base
            ln -s $y_slice_dir/polyMesh $wind_directory/constant/polyMesh

            # Copy initial conditions, change wind speed
            cd $wind_directory
            if [ $end_iter -gt 0 ]; then
                sed -i -e "s/endTime\s\{1,\}[0-9]*/endTime\t${end_iter}/g" system/controlDict
            fi
            if [ $write_iter -gt 0 ]; then
                sed -i -e "s/writeInterval\s\{1,\}[0-9]*/writeInterval\t${write_iter}/g" system/controlDict
            fi

            cp -r $base_case/simpleFoam/0.orig.k_eps $wind_directory/0
            sed -i "s/WINDSPEED/$w/" 0/include/ABLConditions
            sed -i "s/INLETK/${k_epsilon[0]}/" 0/k
            sed -i "s/INLETEPSILON/${k_epsilon[1]}/" 0/epsilon
            echo -ne "\tCase setup complete: Y=$current_y, W=$w, running simpleFoam..."
            simpleFoam > simpleFoam.log 2> simpleFoam.err
            if [ "$?" -gt 0 ]; then
                echo " failed. Moving to next case"
            else
                echo " done."
                cd $wind_directory
                touch hill.foam

                echo -ne "\tResampling results onto test grid..."
                printf -v csv_file "%s_Y%+04.0fW%02d" $casename $current_y $w
                python "${python_directory}/resample.py" --case-dir $wind_directory --mesh-dir $reGrid_dir \
                    --case-foam hill.foam --outfile "$home_dir/$csv_dir/$csv_file"
                if [ "$?" -gt 0 ]; then
                    echo " failed. Moving to next case."
                else
                    echo " done."
                fi
            fi
        done

        current_y=$(echo "scale=4; $current_y + $y_step" | bc)
        cd $case_dir
    done
    echo "  All slices complete."
    cd $home_dir
done

