#!/bin/bash

# Set up some stuff for getopts
OPTIND=1

# Default values
stl_dir="stl/"
base_dir="base_case/"
csv_dir="csv/"
NY=2
DW=20
HOMEDIR=$(pwd)

usage() { echo "Usage: $0 [-s stl_dir -c csv_dir -b base_dir -n n_slices -w delta_wind]" 1>&2; exit 0; }

while getopts ":s:c:b:n:w:" opt; do
    case "$opt" in
        s)  stl_dir=$OPTARG
            ;;
        c)  csv_dir=$OPTARG
            ;;
        b)  base_dir=$OPTARG
            ;;
        n)  NY=$OPTARG
            ;;
        w)  DW=$OPTARG
            ;;
        *)
            usage
            ;;
    esac
done

constant_files=(transportProperties turbulenceProperties)
system_files=(controlDict fvSchemes fvSolution)
BASECASES=$HOMEDIR/$base_dir
PYDIR=$HOMEDIR/python
mkdir -p $csv_dir

create_base_case()
{
    local f
    # Argument 1 is the case name directory, arg 2 is the file source
    mkdir -p $1/system
    for f in ${system_files[@]}; do
        ln -s $2/system/$f $1/system/$f
    done
    
    mkdir -p $1/constant
    for f in ${constant_files[@]}; do
        ln -s $2/constant/$f $1/constant/$f
    done
}

# Loop over stl files, create new directory for each case
for stl_file in ${stl_dir}/*.stl; do
    basename=$(basename -- "$stl_file")
    extension="${basename##*.}"
    casename="${basename%.*}"
    
    echo "Creating new case ${casename} based on ${stl_file}"
    CASEDIR=${HOMEDIR}/cases/${casename}
    mkdir -p $CASEDIR

    SIMPLEDIR="${CASEDIR}/simpleFoam"
    SNAPPYDIR="${CASEDIR}/snappyHexMesh"
    GRIDDIR="${CASEDIR}/reGrid"
    STLOUT="${CASEDIR}/${casename}.stl"

    # Use python script to generate new stl file (reset origin) and terrainDict
    # Y limits should be only thing printed (bit dodge though...)
    YLIMS=$(python python/stl_terrainDict.py -si ${stl_file} -so ${STLOUT} \
        -do ${CASEDIR}/terrainDict --pad-z 3.0)
    echo "YLIMS = ${YLIMS}"
    YLIMS=($YLIMS)      #<- This converts string to array to access elements ${YLIMS[i]}
    
    touch ${CASEDIR}/sliceDict
    
    # Create simpleFoam directory for running simpleFoam
    create_base_case $SIMPLEDIR $BASECASES/base
    ln -s $BASECASES/simpleFoam/system/extrudeMeshDict \
        $SIMPLEDIR/system/extrudeMeshDict
    ln -s ${CASEDIR}/terrainDict $SIMPLEDIR/system/terrainDict
    ln -s ${CASEDIR}/sliceDict $SIMPLEDIR/system/sliceDict

    # Create snappy directory for generating mesh
    create_base_case $SNAPPYDIR $BASECASES/base
    mkdir -p $SNAPPYDIR/constant/triSurface
    ln -s $STLOUT $SNAPPYDIR/constant/triSurface/${casename}.stl
    ln -s $BASECASES/snappyHexMesh/system/blockMeshDict \
        $SNAPPYDIR/system/blockMeshDict
    ln -s $BASECASES/snappyHexMesh/system/snappyHexMeshDict \
        $SNAPPYDIR/system/snappyHexMeshDict
    ln -s ${CASEDIR}/terrainDict $SNAPPYDIR/system/terrainDict
    ln -s ${CASEDIR}/sliceDict $SNAPPYDIR/system/sliceDict

    # Create reGrid directory for output resampling onto regular grid
    create_base_case $GRIDDIR $BASECASES/base
    ln -s $BASECASES/reGrid/system/blockMeshDict \
        $GRIDDIR/system/blockMeshDict
    ln -s ${CASEDIR}/terrainDict $GRIDDIR/system/terrainDict
    ln -s ${CASEDIR}/sliceDict $GRIDDIR/system/sliceDict
    ln -s $BASECASES/reGrid/Allclean $GRIDDIR/Allclean
   
    # ------ SLICING ------#
    # Now we have created all the base runs, start slicing
    YLO=${YLIMS[0]}
    YHI=${YLIMS[1]}

    DY=$(echo "scale=2; ($YHI - $YLO) / $NY" | bc)
    CY=$YLO

    cd ${CASEDIR}
    echo "Running from CASEDIR:${CASEDIR}, NY=${NY}, DY=${DY}, DW=${DW}"

    # Loop over CY positions
    for (( yi=0; yi<$NY; yi++)); do
        echo -n "Slice $(($yi+1))/$NY: Y=$CY, building mesh..."
        sed "s/YSLICE/${CY}/" $HOMEDIR/sliceDict.in > $CASEDIR/sliceDict

        cd $SNAPPYDIR
        blockMesh > blockMesh.log
        snappyHexMesh -overwrite > snappyHexMesh.log

        cd $SIMPLEDIR
        extrudeMesh > extrudeMesh.log

        YDIR="${CASEDIR}/YS${CY}"

        mkdir $YDIR
        cd $YDIR
        cp -r $SIMPLEDIR/constant/polyMesh $YDIR
        echo " done."
        
        echo -n "Building resampled (regular) mesh for final output..."
        cd $GRIDDIR
        ./Allclean
        blockMesh > blockMesh.log
        touch testgrid.foam
        echo " done."

        # Loop over wind speeds
        for (( w=1; w<=15; w+=$DW)); do

            # Calculate k, epsilon
            K_EPS=($(python $PYDIR/abl_k_epsilon.py -U $w))

            WDIR="${YDIR}/W${w}"
            # Create system folder, symlinks from base case
            create_base_case $WDIR $BASECASES/base
            ln -s $YDIR/polyMesh $WDIR/constant/polyMesh
            
            # Copy initial conditions, change wind speed
            cd $WDIR
            cp -r $BASECASES/simpleFoam/0.orig.k_eps $WDIR/0
            sed -i "s/WINDSPEED/$w/" 0/include/ABLConditions
            sed -i "s/INLETK/${K_EPS[0]}/" 0/k
            sed -i "s/INLETEPSILON/${K_EPS[1]}/" 0/epsilon
            echo -n "Case setup complete: Y=$CY, W=$w, running simpleFoam..."
            simpleFoam > simpleFoam.log
            echo " done."
            cd $WDIR
            touch hill.foam

            echo -n "Resampling grid onto test grid..."
            printf -v CSVFILE "%s_Y%+04.0fW%02d.csv" $casename $CY $w
            python "${HOMEDIR}/python/resample.py" --case-dir $WDIR --mesh-dir $GRIDDIR \
                --outfile "$HOMEDIR/$csv_dir/$CSVFILE"
            echo " done."
        done

        CY=$(echo "scale=4; $CY + $DY" | bc)
        cd $CASEDIR
    done
    echo "All slices complete."
    cd $HOMEDIR
done

